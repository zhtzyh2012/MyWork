
08:38 到公司
08:39-08:40 查看Java组的日志内容
08:41-08:44 整理桌面卫生
08:45-09:02 处理个人私事
09:03-09:07 休息
09:08-09:20 整理查看spring.data.redis
09:20-09:25 组织Java组早会内容
09:26-10:37 思考如何整体把握spring.data.redis的代码查看
10:38-10:42 休息
10:43-11:07 参考官网理解spring.data.redis的代码
11:08-11:20 休息
11:21-11:45 参考官网理解spring.data.redis的代码
11:46-11:50 休息
11:51-11:57 参考官网理解spring.data.redis的代码
11:58-13:30 午休
13:31-15:09 参考官网理解spring.data.redis的代码
15:10-15:15 休息
15:16-15:48 参考官网理解spring.data.redis的代码
15:49-16:01 休息
16:02-16:35 参考官网理解spring.data.redis的代码
16:36-16:41 休息
16:42-17:20 参考官网理解spring.data.redis的代码
17:21-18:04 处理myPartners总是被限制的问题
18:05-18:30 休息
18:31-20:20 参考官网理解spring.data.redis的代码

1.查找myPartners总是被限制的问题
2.参考官网理解spring.data.redis的代码

技术管理:
   1.昨天增勋说的这个修改价格的情况,整个订单金额处于失控状态的,总是各种各样的特殊情况构成目前的订单状态,无法做到标准化处理,之前所做的各种标准化处理其实破坏殆尽的.为了应对各种情景,现在我不认为是代码腐烂的速度加快,我更认为是业务的不断变化,导致代码各个复杂性的处理,到底是业务失控,还是代码的失控呢,我仿佛可以看到将来适应这种情况后的代码,千疮百孔,最后重构又推翻重新来过.以目前来看,需要深度优化吗?我认为我们可以局部优化,而不是全部优化,因为深度优化后又是进行肢解,又开始破坏掉之前的业务情况,然后将每个部分再次重新腐蚀掉的.实际需要处理的是之前的保姆单和智能注册订单的合并处理而已,我认为仅此而已,深度优化的价值没有什么体现的.
   2.其实我很烦这样的事情的,但是需要按捺住我烦躁的心情,我要如何平静地把这个问题处理掉呢?要分析问题的原因,怎么去处理这个问题,是去正向地去解决这个问题,还是反向地去消灭这个问题呢.不过很高兴,我压制住了心情的烦躁,虽然思考的比较浅层次,但是聚焦于如何是向后一步消灭这个问题,还是向前一步面对解决这个问题.

反思总结:
   1.处理myPartners总是被限制的问题第一眼看到就不应该有这些东西,所以直接下的结论就是这东西不该在拦截中体现出来的,所以直接和穆哥说的,有没问题呢?没事,如果非常熟悉非常自信就应该如此,但是说错了,错的不是我的做事上,而是我对那块处理的东西就居然忘记啦,这是个问题,自己做完居然印象没有那么深刻.
   2.处理myPartners问题找到后,其实不应该由我们Java组来处理,谁的问题谁自己去找,而不应该让我们去处理的,本身就不是我们这的问题,为什么要让我这块去处理呢,事情的根源就是没有写入到缓存中,那么相关人去查询为什么没有写入到缓存中,而不是让我这几个人去查询为什么没有写入到缓存中
   

connection.lettuce
core及其sub package
hash
serializer
support及其sub package

